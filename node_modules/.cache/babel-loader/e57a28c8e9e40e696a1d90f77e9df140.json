{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseFeed = exports.FeedHandler = exports.getFeed = void 0;\n\nvar domhandler_1 = __importDefault(require(\"domhandler\"));\n\nvar domutils_1 = require(\"domutils\");\n\nObject.defineProperty(exports, \"getFeed\", {\n  enumerable: true,\n  get: function () {\n    return domutils_1.getFeed;\n  }\n});\n\nvar Parser_1 = require(\"./Parser\");\n/** @deprecated Handler is no longer necessary; use `getFeed` or `parseFeed` instead. */\n\n\nvar FeedHandler =\n/** @class */\nfunction (_super) {\n  __extends(FeedHandler, _super);\n  /**\n   *\n   * @param callback\n   * @param options\n   */\n\n\n  function FeedHandler(callback, options) {\n    var _this = this;\n\n    if (typeof callback === \"object\") {\n      callback = undefined;\n      options = callback;\n    }\n\n    _this = _super.call(this, callback, options) || this;\n    return _this;\n  }\n\n  FeedHandler.prototype.onend = function () {\n    var feed = (0, domutils_1.getFeed)(this.dom);\n\n    if (feed) {\n      this.feed = feed;\n      this.handleCallback(null);\n    } else {\n      this.handleCallback(new Error(\"couldn't find root of feed\"));\n    }\n  };\n\n  return FeedHandler;\n}(domhandler_1.default);\n\nexports.FeedHandler = FeedHandler;\n/**\n * Parse a feed.\n *\n * @param feed The feed that should be parsed, as a string.\n * @param options Optionally, options for parsing. When using this, you should set `xmlMode` to `true`.\n */\n\nfunction parseFeed(feed, options) {\n  if (options === void 0) {\n    options = {\n      xmlMode: true\n    };\n  }\n\n  var handler = new domhandler_1.default(null, options);\n  new Parser_1.Parser(handler, options).end(feed);\n  return (0, domutils_1.getFeed)(handler.dom);\n}\n\nexports.parseFeed = parseFeed;","map":null,"metadata":{},"sourceType":"script"}