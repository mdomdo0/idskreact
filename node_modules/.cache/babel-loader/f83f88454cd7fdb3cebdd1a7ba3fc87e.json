{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTML = exports.determineBranch = exports.JUMP_OFFSET_BASE = exports.BinTrieFlags = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;\n\nvar decode_data_html_1 = __importDefault(require(\"./generated/decode-data-html\"));\n\nexports.htmlDecodeTree = decode_data_html_1.default;\n\nvar decode_data_xml_1 = __importDefault(require(\"./generated/decode-data-xml\"));\n\nexports.xmlDecodeTree = decode_data_xml_1.default;\n\nvar decode_codepoint_1 = __importDefault(require(\"./decode_codepoint\"));\n\nvar BinTrieFlags;\n\n(function (BinTrieFlags) {\n  BinTrieFlags[BinTrieFlags[\"HAS_VALUE\"] = 32768] = \"HAS_VALUE\";\n  BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 32512] = \"BRANCH_LENGTH\";\n  BinTrieFlags[BinTrieFlags[\"MULTI_BYTE\"] = 128] = \"MULTI_BYTE\";\n  BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));\n\nexports.JUMP_OFFSET_BASE = 48\n/* ZERO */\n- 1;\n\nfunction getDecoder(decodeTree) {\n  return function decodeHTMLBinary(str, strict) {\n    var ret = \"\";\n    var lastIdx = 0;\n    var strIdx = 0;\n\n    while ((strIdx = str.indexOf(\"&\", strIdx)) >= 0) {\n      ret += str.slice(lastIdx, strIdx);\n      lastIdx = strIdx; // Skip the \"&\"\n\n      strIdx += 1; // If we have a numeric entity, handle this separately.\n\n      if (str.charCodeAt(strIdx) === 35\n      /* NUM */\n      ) {\n        // Skip the leading \"&#\". For hex entities, also skip the leading \"x\".\n        var start = strIdx + 1;\n        var base = 10;\n        var cp = str.charCodeAt(start);\n\n        if ((cp | 32\n        /* To_LOWER_BIT */\n        ) === 120\n        /* LOWER_X */\n        ) {\n          base = 16;\n          strIdx += 1;\n          start += 1;\n        }\n\n        while ((cp = str.charCodeAt(++strIdx)) >= 48\n        /* ZERO */\n        && cp <= 57\n        /* NINE */\n        || base === 16 && (cp | 32\n        /* To_LOWER_BIT */\n        ) >= 97\n        /* LOWER_A */\n        && (cp | 32\n        /* To_LOWER_BIT */\n        ) <= 102\n        /* LOWER_F */\n        );\n\n        if (start !== strIdx) {\n          var entity = str.substring(start, strIdx);\n          var parsed = parseInt(entity, base);\n\n          if (str.charCodeAt(strIdx) === 59\n          /* SEMI */\n          ) {\n            strIdx += 1;\n          } else if (strict) {\n            continue;\n          }\n\n          ret += decode_codepoint_1.default(parsed);\n          lastIdx = strIdx;\n        }\n\n        continue;\n      }\n\n      var result = null;\n      var excess = 1;\n      var treeIdx = 0;\n      var current = decodeTree[treeIdx];\n\n      for (; strIdx < str.length; strIdx++, excess++) {\n        treeIdx = determineBranch(decodeTree, current, treeIdx + 1, str.charCodeAt(strIdx));\n        if (treeIdx < 0) break;\n        current = decodeTree[treeIdx]; // If the branch is a value, store it and continue\n\n        if (current & BinTrieFlags.HAS_VALUE) {\n          // If we have a legacy entity while parsing strictly, just skip the number of bytes\n          if (strict && str.charCodeAt(strIdx) !== 59\n          /* SEMI */\n          ) {\n            // No need to consider multi-byte values, as the legacy entity is always a single byte\n            treeIdx += 1;\n          } else {\n            // If this is a surrogate pair, combine the higher bits from the node with the next byte\n            result = current & BinTrieFlags.MULTI_BYTE ? String.fromCharCode(decodeTree[++treeIdx], decodeTree[++treeIdx]) : String.fromCharCode(decodeTree[++treeIdx]);\n            excess = 0;\n          }\n        }\n      }\n\n      if (result != null) {\n        ret += result;\n        lastIdx = strIdx - excess + 1;\n      }\n    }\n\n    return ret + str.slice(lastIdx);\n  };\n}\n\nfunction determineBranch(decodeTree, current, nodeIdx, char) {\n  if (current <= 128) {\n    return char === current ? nodeIdx : -1;\n  }\n\n  var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 8;\n\n  if (branchCount === 0) {\n    return -1;\n  }\n\n  if (branchCount === 1) {\n    return char === decodeTree[nodeIdx] ? nodeIdx + 1 : -1;\n  }\n\n  var jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n\n  if (jumpOffset) {\n    var value = char - exports.JUMP_OFFSET_BASE - jumpOffset;\n    return value < 0 || value > branchCount ? -1 : decodeTree[nodeIdx + value] - 1;\n  } // Binary search for the character.\n\n\n  var lo = nodeIdx;\n  var hi = lo + branchCount - 1;\n\n  while (lo <= hi) {\n    var mid = lo + hi >>> 1;\n    var midVal = decodeTree[mid];\n\n    if (midVal < char) {\n      lo = mid + 1;\n    } else if (midVal > char) {\n      hi = mid - 1;\n    } else {\n      return decodeTree[mid + branchCount];\n    }\n  }\n\n  return -1;\n}\n\nexports.determineBranch = determineBranch;\nvar htmlDecoder = getDecoder(decode_data_html_1.default);\nvar xmlDecoder = getDecoder(decode_data_xml_1.default);\n\nfunction decodeHTML(str) {\n  return htmlDecoder(str, false);\n}\n\nexports.decodeHTML = decodeHTML;\n\nfunction decodeHTMLStrict(str) {\n  return htmlDecoder(str, true);\n}\n\nexports.decodeHTMLStrict = decodeHTMLStrict;\n\nfunction decodeXML(str) {\n  return xmlDecoder(str, true);\n}\n\nexports.decodeXML = decodeXML;","map":null,"metadata":{},"sourceType":"script"}